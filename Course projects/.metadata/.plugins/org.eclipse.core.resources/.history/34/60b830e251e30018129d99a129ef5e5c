/*
 * war3.cpp
 *
 *  Created on: 2018年11月7日
 *      Author: yyiust
 */


#include <cstdio>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

const int WEAPON_NUM=3;
const int WARR_NUM=5;
const int MAX_WEAPON=10;
string W_NAMES[WARR_NUM]={"dragon","ninja","iceman","lion","wolf"};
string WEAPONS[WEAPON_NUM]={"sword","bomb","arrow"};
int CITY_NUM;
int M,K;
bool r_win=false,b_win=false;

//red: iceman,lion,wolf,ninja,dragon
//blue:lion, dragon,ninja,iceman,wolf
//input:dragon,ninja,iceman,lion,wolf

class tribe;
class warrior;
class weapon{
private:
	int weapon_idx; //武器编号
	warrior *owner; //拥有武器的武士
	int weapon_life;
	bool is_weapon_ok; //武器是否还能用
public:
	friend class warrior;
	friend class cmp_battle;
	friend class cmp_snatch;
	weapon(warrior *wp,int w_idx):weapon_idx(w_idx),owner(wp){
		is_weapon_ok=true;
		switch(w_idx){
		case 0: weapon_life=0xffff;break;
		case 1: weapon_life=1;break;
		case 2: weapon_life=2;break;
		default: break;
		}
	}

	void update_weapon(){
		weapon_life--;
		switch(weapon_idx){
		case 0://sword，没有使用次数限制，但因为抢夺时排名需要，要计算其使用次数
			is_weapon_ok=true;
			break;
		case 1://bomb，用完就丢
			is_weapon_ok=false;
			break;
		case 2://arrow，只能用两次
			if(weapon_life<=0) is_weapon_ok=false;
			break;
		default: break;
		}
	}
};

struct cmp_battle{
	bool operator()(const weapon *w1, const weapon *w2) {
		if(w1->weapon_idx<w2->weapon_idx) return true;//编号小的优先
		else if(w1->weapon_idx==w2->weapon_idx) return w1->weapon_life<w2->weapon_life;//用过的优先
		else return false;
	}
};

struct cmp_snatch{
	bool operator()(const weapon *w1, const weapon *w2) {
		if(w1->weapon_idx<w2->weapon_idx) return true;//编号小的优先
		else if(w1->weapon_idx==w2->weapon_idx) return w1->weapon_life>w2->weapon_life;//没用过的优先
		else return false;
	}
};

class warrior{
protected:
	tribe *ptribe;    //武士属于哪个部落
	int warr_idx;     //武士种类编号
	int warr_no;      //武士编号n
	int HP, ATK;      //武士生命值，攻击力
	int weapon_n[3];    //武士的武器数目
	vector<weapon*> own_weapon; //武士拥有哪些武器
	int weapon_total;
	bool alive;
public:
	int city_n;      //武士走到的城市
	static string names[WARR_NUM];
	static int initHP[WARR_NUM];
	static int initATK[WARR_NUM];
	static string weapons[WEAPON_NUM];

	friend class tribe;
	friend void battle(warrior &wr, warrior &wb, int nHour,int city_);
	//成员函数
	warrior(tribe * p,int idx,int w_no, int hp_,int atk_);
	virtual void print_info(int nHour);
	virtual void init_my_weapon();
	bool isalive(){return alive;}
	void update_alive(){if(HP<=0) alive=false;}

	void use_weapon(int id);
	void get_weapon(weapon *w);
	void lose_weapon(weapon *w,int id);

	void attack(warrior &enemy,int id);

	void wolf_snatch(warrior *enemy,int nHour);
	virtual void march(int nHour); //前进一步

	virtual ~warrior(){
		for (int i=0;i<weapon_total;i++)
			delete own_weapon[i];
		own_weapon.clear();
	}
};

class tribe{
protected:
	int elements; //生命元
	int warr_n[WARR_NUM];//每种战士数
	int warr_total;
	int color;
	int cur_idx;
	bool taken;
	vector<warrior*> own_warriors;
public:
	friend class warrior;
	friend class lion;
	friend class iceman;
	friend class wolf;
	static int sequence[2][5];

	tribe(int M,int col){
		elements=M;
		color=col;
		cur_idx=0;
		taken=false;
		warr_total=0;
	}
	string get_color(){if(color) return "blue";else return "red";}
	void produce(int nHour);
	void update_my_warriors(warrior *w);
	void print_produce(warrior *w,int nHour){w->print_info(nHour);};
	~tribe(){
		for (int i=0;i<warr_total;i++)
			delete own_warriors[i];
		own_warriors.clear();
	}
};

class fields{
public:
	vector<vector<warrior*> > citys;
	citys(int N){
		for(int i=0;i<=N+1;i++){
			warrior *tmp=NULL;
			citys.push_back(tmp);
		}
		}
};

warrior::warrior(tribe * p,int idx,int w_no, int hp_,int atk_){
		ptribe=p;
		warr_idx=idx;
		warr_no=w_no;
		HP=hp_; ATK=atk_;
		alive=true;
		if(ptribe->color) city_n=CITY_NUM+1;
		else city_n=0;
}


//武士子类
class ninja:public warrior{
public:
	ninja(tribe * p,int idx,int w_no, int hp_,int atk_):warrior(ptribe, warr_idx,warr_no,HP,ATK){}
	virtual void init_my_weapon();
};

class iceman:public warrior{
public:
	friend class tribe;
	iceman(tribe * p,int idx,int w_no, int hp_,int atk_):warrior(ptribe, warr_idx,warr_no,HP,ATK){}
	virtual void march(int nHour);

};

class lion:public warrior{
private:
	int loyalty;
public:
	friend class tribe;
	lion(tribe * p,int idx,int w_no, int hp_,int atk_):warrior(ptribe, warr_idx,warr_no,HP,ATK){loyalty=ptribe->elements;};
	virtual void print_info(int nHour);
	virtual void march(int nHour);
	void escape(int nHour){
		if(loyalty<=0 && alive){
			if(ptribe->color && city_n>0)
				printf("%03d:05 blue lion %d ran away\n",nHour,warr_no);
			else if(ptribe->color==0 && city_n<CITY_NUM+1)
				printf("%03d:05 red lion %d ran away\n",nHour,warr_no);
		}
	}
};

class wolf:public warrior{
public:
	friend class tribe;
	friend class cmp_snatch;
	wolf(tribe * p,int idx,int w_no, int hp_,int atk_):warrior(ptribe, warr_idx,warr_no,HP,ATK){}
	virtual void init_my_weapon();


};

void warrior::print_info(int nHour){
	string col=ptribe->get_color();
	string warr_type=warrior::names[warr_idx];
	printf("%03d:00 %s %s %d born\n",nHour,col.c_str(),warr_type.c_str(),warr_no);

}
void lion::print_info(int nHour){
	string col=ptribe->get_color();
	string warr_type=warrior::names[warr_idx];
	printf("%03d:00 %s %s %d born\n",nHour,col.c_str(),warr_type.c_str(),warr_no);
	printf("Its loyalty is %d\n",loyalty);
}
void warrior::init_my_weapon(){
	weapon_n[3]={0};
	weapon_n[warr_no%3]++;
	weapon *w=new weapon(this,warr_no%3);
	own_weapon.push_back(w);
	weapon_total=1;
}
void ninja::init_my_weapon(){
	weapon_n[3]={0};
	weapon_n[warr_no%3]++;
	weapon *w1=new weapon(this,warr_no%3);
	own_weapon.push_back(w1);
	weapon_n[(warr_no+1)%3]++;
	weapon *w2=new weapon(this,(warr_no+1)%3);
	own_weapon.push_back(w2);
	weapon_total=2;
}
void wolf::init_my_weapon(){weapon_n[3]={0};weapon_total=0;}

//使用武器更新
void warrior::use_weapon(int id){
	if(own_weapon[id]->is_weapon_ok==false){
		int w_idx=own_weapon[id]->weapon_idx;
		delete own_weapon[id];
		own_weapon.erase(own_weapon.begin()+id);
		weapon_n[w_idx]--;
	}
	return;
}

//抢来武器更新
void warrior::get_weapon(weapon *w){
	if(w->is_weapon_ok){
		int w_idx=w->weapon_idx;//武器编号
		weapon_n[w_idx]++; //该种武器+1
		own_weapon.push_back(w);
	}
	return;
}

//失去武器更新

void warrior::lose_weapon(weapon *w,int id){
	int w_idx=w->weapon_idx;//武器种类编号
	weapon_n[w_idx]--; //该种武器减1
	own_weapon.erase(own_weapon.begin()+id);
	return;
}



void warrior::march(int nHour){
	string c=ptribe->get_color();
	if(ptribe->color) city_n--;
	else city_n++;
	string warr_type=names[warr_idx];
	printf("%03d:10 %s %s %d marched to city %d with %d elements and force %d\n",
			nHour, c.c_str(),warr_type.c_str(),warr_no,city_n,HP,ATK);
	return;
}
void iceman::march(int nHour){
	HP-=10;
	string c=ptribe->get_color();
	if(ptribe->color) city_n--;
	else city_n++;
	update_alive();
	if(alive) {
		printf("%03d:10 %s iceman %d marched to city %d with %d elements and force %d\n",
				nHour, c.c_str(),warr_no,city_n,HP,ATK);
		return;
	}
}
void lion::march(int nHour){
	string c=ptribe->get_color();
	if(ptribe->color) city_n--;
	else city_n++;
	loyalty-=K;
	if(loyalty>0) {
		printf("%03d:10 %s lion %d marched to city %d with %d elements and force %d\n",
				nHour, c.c_str(),warr_no,city_n,HP,ATK);
	}
}

void warrior::wolf_snatch(warrior *enemy,int nHour){
		if(enemy->warr_idx==4) return;//对方也是wolf，不能抢
		//可以抢的时候，如果自己手上武器太多，或者对方没武器，则不抢
		else if (enemy->own_weapon.size()|| own_weapon.size()==MAX_WEAPON) return;
		else{
			int your_num=enemy->own_weapon.size();
			sort(enemy->own_weapon.begin(),enemy->own_weapon.end(),cmp_snatch());
			int w0=weapon_n[0],w1=weapon_n[1],w2=weapon_n[2];
			for(int i=0;i<your_num;i++){
				if(own_weapon.size()==10)break;//抢够了
				weapon *w = enemy->own_weapon[i]; //定位要抢的武器
				get_weapon(w); ;//抢到武器
				enemy->lose_weapon(w,i); //对方武器没了
			}
			//抢完了，汇报
			int add_0 = weapon_n[0]-w0;
			int add_1 = weapon_n[1]-w1;
			int add_2 = weapon_n[2]-w2;
			string my_color=ptribe->get_color();
			string ur_color=enemy->ptribe->get_color();
			string enemy_type = names[enemy->warr_idx];
			int my_n=warr_no,ur_no=enemy->warr_no;
			if (add_0!=0)
				printf("%03d:35 %s wolf %d took %d sword from %s %s %d in city %d\n",
						nHour,my_color.c_str(),my_n,add_0,ur_color.c_str(),enemy_type.c_str(),ur_no,city_n);
			if (add_1!=0)
				printf("%03d:35 %s wolf %d took %d bomb from %s %s %d in city %d\n",
						nHour,my_color.c_str(),my_n,add_1,ur_color.c_str(),enemy_type.c_str(),ur_no,city_n);
			if (add_2!=0)
				printf("%03d:35 %s wolf %d took %d arrow from %s %s %d in city %d\n",
						nHour,my_color.c_str(),my_n,add_2,ur_color.c_str(),enemy_type.c_str(),ur_no,city_n);
		}
}
void warrior::attack(warrior &enemy,int id){
	if(isalive() && enemy.isalive()){
		if(HP>0){
			if(own_weapon[id]->weapon_idx==0) enemy.HP-=ATK*4/10;
			else if(own_weapon[id]->weapon_idx==1){
				if(warr_idx!=1) HP=HP-ATK*2/10;
				enemy.HP-=ATK*4/10;
			}
			else if(own_weapon[id]->weapon_idx==1) enemy.HP-=ATK*4/10;
			//打完了，更新状态
			own_weapon[id]->update_weapon();//更新使用的武器的状态
			use_weapon(id);//更新武士当前拥有武器状态
			update_alive(); //更新武士状态
			enemy.update_alive();//更新敌人状态
		}
	}
}
//tribe的成员函数

void tribe::produce(int nHour){
	//看生命元是否足够
	int searchNum=0;
	while(warrior::initHP[sequence[color][cur_idx]]>elements && searchNum<5){
		cur_idx=(cur_idx+1)%5;
		searchNum++;
	}
	int wIdx=sequence[color][cur_idx];//现在要制造武士的编号
	if(warrior::initHP[wIdx]<elements){
		//制造武士
		int w_HP=warrior::initHP[wIdx];
		int w_ATK=warrior::initATK[wIdx];
		elements -= w_HP;                          //司令部生命元减少
		cur_idx=(cur_idx+1)%5;                    //下次要制造的武士在数组中的序列号
		//制造武士所需信息：所属部落，武士种类编号，武士id，HP,ATK
		warrior *s = new warrior(this,wIdx,warr_total+1,w_HP,w_ATK);
		update_my_warriors(s);
		print_produce(s,nHour);
	}
}

void tribe::update_my_warriors(warrior *w){
	if (w->alive){
		//武士降生时调用
		own_warriors.push_back(w);
		warr_total++;
		warr_n[w->warr_idx]++;
	}
}


string warrior::names[WARR_NUM]={"dragon","ninja","iceman","lion","wolf"};
string warrior::weapons[WEAPON_NUM]={"sword","bomb","arrow"};
int tribe::sequence[2][5]={{ 2,3,4,1,0 },{3,0,1,2,4}};
int warrior::initHP[5]={100,20,10,10,10};
int warrior::initATK[5]={0,0,0,0,0};


int main(){
	//tribe Red(1000,0);
	//Red.produce(0);
	/*int t,M,N,nTime;
	int counts=1;
	tribe Red,Blue;
	int nHour,nMin;
	cin>>t;
	while(t--){
		cout<<"Case "<<counts<<":"<<endl;
		counts++;
		//接受输入

		//
		while(nTime>=0){
			if(nMin==0){//1武士降生

			}
			else if(nMin==5){
				//2.lion逃跑
			}
			else if(nMin==10){
				//3.武士行军，march
				//7.武士抵达敌军司令部
				//8.司令部被占领
			}
			else if(nMin==35){
				//4.wolf抢武器
			}
			else if(nMin==40){
				//5.报告战斗情况
				//6.dragon欢呼
			}
			else if(nMin==50){
				//9.司令部报告生命元数量
			}
			else if(nMin==55){
				//10.武士报告情况
			}
		}
	}*/
	return 0;

}





